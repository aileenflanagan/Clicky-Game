{"version":3,"sources":["ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","onClick","clickImg","id","src","image","alt","name","score","highScore","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","checkClicked","arr","console","log","i","App","state","cards","clickedCards","_this","setState","concat","Object","toConsumableArray","_this2","this","Fragment","map","card","src_ImageCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m0DAeeA,MAXf,SAAmBC,GACjB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAEbH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAIL,EAAMM,SAASN,EAAMO,KAAKC,IAAKR,EAAMS,MAAOC,IAAKV,EAAMW,KAAMP,UAAU,oBCH7FQ,EAAQ,EACRC,EAAY,EAEZC,EAAU,SAAUC,GAGtB,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAElB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GAaHQ,EAAe,SAAUhB,EAAIiB,GAIjC,GAHAC,QAAQC,IAAI,OAAQnB,GACpBkB,QAAQC,IAAI,gBAAiBF,GAEzBA,EAAIL,OAAS,EAAG,CAClBM,QAAQC,IAAI,MAAMF,EAAIL,QACtB,IAAK,IAAIQ,EAAE,EAAGA,EAAGH,EAAIL,OAAQQ,IAK1BH,EAAIG,KAAKpB,GACRkB,QAAQC,IAAI,gBArBfd,EAAMC,GACPY,QAAQC,IAAI,MAAMb,EAAW,OAAOD,GACpCC,EAAUD,EACVA,EAAM,GAGNA,EAAM,GAmBJA,SAIiB,IAAbY,EAAIL,QACZP,KAyEagB,6MAnEbC,MAAQ,CACNC,MAAOhB,EAAQgB,GACfC,aAAc,MAGhBzB,SAAW,SAAAC,GAETyB,EAAKC,SAAS,CACZH,MAAOhB,EAAQgB,GACfC,aAAY,GAAAG,OAAAC,OAAAC,EAAA,EAAAD,CAAMH,EAAKH,MAAME,cAAjB,CAA+BxB,MAY7CgB,EAAahB,EAAIyB,EAAKH,MAAME,uFASrB,IAAAM,EAAAC,KAKP,OACErC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqC,SAAA,KACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,+DACAH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,UAA8CQ,GAAaX,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,gBAAoDS,MAIvHZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZkC,KAAKT,MAAMC,MAAMU,IAChB,SAACC,GACC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CACLC,IAAKF,EAAKlC,GACVA,GAAIkC,EAAKlC,GACTE,MAAOgC,EAAKhC,MACZE,KAAM8B,EAAK9B,KACXL,SAAU+B,EAAK/B,sBAtDbsC,aCjDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c5e3785.chunk.js","sourcesContent":["import React from \"react\";\r\n// \r\n// import \"./style.css\";\r\n\r\nfunction ImageCard(props) {\r\n  return (\r\n    // <div className=\"card\">\r\n      <div className=\"img-container float-left\"> \r\n      {/*  */}\r\n        <img onClick={()=>props.clickImg(props.id)} src={props.image} alt={props.name} className=\"img-thumbnail\"></img>\r\n      </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default ImageCard;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport cards from \"./infoArray.json\"\nimport ImageCard from './ImageCard';\n\nlet score = 0;\nlet highScore = 0;\n// let arr1= [1,2,3,4,5,6]\nvar shuffle = function (array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst gameOver= function(){\n  if(score>highScore){\n    console.log(\"h: \",highScore, \" S: \",score)\n    highScore=score;\n    score=0;\n  }\n  else \n    score=0\n}\n\nconst checkClicked = function (id, arr) {\n  console.log(\"id: \", id);\n  console.log(\"clicked arr: \", arr);\n\n  if (arr.length > 0) {\n    console.log(\"L: \",arr.length);\n    for (let i=0; i< arr.length; i++) {\n      // console.log(arr[i]);\n    //   console.log(beenClicked);\n      \n    //if any element in the array is has been clicked\n    if(arr[i]===id){\n        console.log(\"been clicked\");\n        gameOver();\n      }\n      else \n      score++;\n     }\n\n  }\n  else if(arr.length===0)\n  score++;\n}\n\n\n\nclass App extends Component {\n  state = {\n    cards: shuffle(cards),\n    clickedCards: []\n  }\n\n  clickImg = id => {\n    // console.log(\"clicked img: \", id);\n    this.setState({\n      cards: shuffle(cards),\n      clickedCards: [...this.state.clickedCards, id]\n    });\n\n    // let checkClicked= function(id){\n    //   if(this.state.clickedCards.length>0){\n    //   for(let i in this.state.clickedCards.length){\n    //     console.log(\"clicked card: \", this.state.clickedCards.length[i], \"= id: \", id)\n    //   }\n    // } \n    // }\n    // checkClicked(id);\n    // console.log(\"length?\", this.state.clickedCards.length)\n    checkClicked(id, this.state.clickedCards);\n  }\n\n  // checkClicked= id=>{\n  //   // console.log(id);\n  //   console.log(\"clicked:\", this.state.clickedCards)\n  // }\n\n  // \n  render() {\n\n    // console.log(\"Clicked so far: \" , this.state.clickedCards)\n    // console.log(shuffle(arr1));\n\n    return (\n      <>\n        <div className=\"jumbotron jumbotron-fluid\">\n          <div className=\"container\">\n            <h1 className=\"display-4\">The Clicky Game</h1>\n            <p className=\"lead\">Click on an image, but don't click an image more than once!</p>\n            <h1><span className=\"badge badge-primary\">Score: {score}</span><span className=\"badge badge-success\"> High Score: {highScore}</span></h1>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          {this.state.cards.map(\n            (card) => {\n              return <ImageCard\n                key={card.id}\n                id={card.id}\n                image={card.image}\n                name={card.name}\n                clickImg={this.clickImg}\n              />\n\n            }\n\n          )}\n\n\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}